snippet reactinit
import React  from 'react';


const ${1:`!p snip.rv = snip.basename`}= () => {
    return (
        <>
        </>
    );
}


export default $1;
endsnippet

snippet reactcomponent
const ${1} = () => {
	return <div></div>
}
endsnippet


snippet classname
className="${1}"
endsnippet

snippet voidfn
() => void
endsnippet

snippet reactemotion
import React from "react";
import styled from "@emotion/styled";
import { css } from "@emotion/react";


export interface `!p snip.rv = snip.basename`Props{


}
endsnippet




snippet styledcom
	
const ${1} = styled.${2}

endsnippet 

snippet cmt
/**
	* ${1}
*/
endsnippet 


snippet stories
import React from "react";
import { Story, Meta } from "@storybook/react";


export default {
  title: "",
  component: ,
} as Meta;

const Template: Story<> = (args) => < {...args} />;

export const Primary = Template.bind({});
Primary.args = { label: "Primary ", size: "small" };

endsnippet 



snippet reactcontainer
import React  from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { RootState } from 'store';

const ${1:`!p snip.rv = snip.basename`}:React.FC<> = () => {
    const { } = useSelector((rootState: RootState) => rootState);
    const dispatch = useDispatch();
    return (
        <>
        </>
    );
}
export default $1;
endsnippet

snippet fncomp
const ${1:prop}: React.FC<${2:prop2}> = ({${3:prop3}}) => {
    return (
        <>
        </>
    );
};
endsnippet

snippet picktype
Pick<${1:prop},'${2:obj}'>
endsnippet


snippet fndescription
/**
@param ${1:prop} 

@description
**/
endsnippet

snippet reactmap
{${1:prop}.map((${2:obj}) => {

	return <div></div>
		})

		}
endsnippet


snippet record
Record<string,${1:prop}>

endsnippet


snippet <
<${1:tag}>`!p snip.rv = '</'+t[1]+'>'`$0
endsnippet

