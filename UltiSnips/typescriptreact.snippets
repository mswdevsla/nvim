snippet ri
import styled from 'styled-components';

const ${1:`!p snip.rv = snip.basename`}Container = styled.div\`\`;

const ${2:`!p snip.rv = snip.basename`}= () => {
    return (
        <${1:`!p snip.rv = snip.basename`}Container>
        </${1:`!p snip.rv = snip.basename`}Container>
    );
}


export default $2;
endsnippet


snippet reactinitobservable
import React  from 'react';
import { useObserver } from 'mobx-react-lite';


const ${1:`!p snip.rv = snip.basename`}= () => {
	return useObserver(() =>{     
	return (<div>
			</div>)
			});
}


export default $1;
endsnippet


snippet reactcomponent
const ${1} = () => {
	return <div></div>
}
endsnippet


snippet classname
className="${1}"
endsnippet

snippet voidfn
() => void
endsnippet

snippet reactemotion
import React from "react";
import styled from "@emotion/styled";
import { css } from "@emotion/react";


export interface `!p snip.rv = snip.basename`Props{


}
endsnippet




snippet sc
	
const ${1} = styled.${2}

endsnippet 

snippet cmt
/**
	* ${1}
*/
endsnippet 


snippet stories
import React from "react";
import { Story, Meta } from "@storybook/react";


export default {
  title: "",
  component: ,
} as Meta;

const Template: Story<> = (args) => < {...args} />;

export const Primary = Template.bind({});
Primary.args = { label: "Primary ", size: "small" };

endsnippet 



snippet reactcontainer
import React  from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { RootState } from 'store';

const ${1:`!p snip.rv = snip.basename`}:React.FC<> = () => {
    const { } = useSelector((rootState: RootState) => rootState);
    const dispatch = useDispatch();
    return (
        <>
        </>
    );
}
export default $1;
endsnippet

snippet fncomp
const ${1:prop}: React.FC<${2:prop2}> = ({${3:prop3}}) => {
    return (
        <>
        </>
    );
};
endsnippet

snippet picktype
Pick<${1:prop},'${2:obj}'>
endsnippet


snippet fndescription
/**
@param ${1:prop} 

@description
**/
endsnippet

snippet rm
{${1:prop}.map((${2:obj}) => {

	return <div></div>
		})

		}
endsnippet


snippet record
Record<string,${1:prop}>

endsnippet


snippet <
<${1:tag}>`!p snip.rv = '</'+t[1]+'>'`$0
endsnippet


snippet casestic
      case '${1}':
        setInfo(
[],[]
		);
		break;
endsnippet

snippet exd
export default 
endsnippet

snippet uq
  const ${1:hook}data = use$1()



  if ($1data.isLoading) {
    return <div>Loading</div>;
  }

  if ($1data.error) {
    return <div>Error</div>;
  }



  if ($1data.isSuccess) {
    return <div>성공</div>;
  }


  return <></>;

endsnippet


snippet um
  const ${1:hook}data = use$1()


  const onSubmit = (data: any) => {
    $1data.mutate({});
  };

  if ($1data.isLoading) {
    return <div>Loading</div>;
  }

  if ($1data.error) {
    return <div>Error</div>;
  }



  if ($1data.isSuccess) {
    return <div>성공</div>;
  }


  return <></>;

endsnippet



snippet rqi
import styled from 'styled-components';

const ${4:`!p snip.rv = snip.basename`}Container = styled.div\`\`;

const ${2:`!p snip.rv = snip.basename`}= () => {

  const ${3:`!p snip.rv = snip.basename`}data = use${1:hookName}

  if ($3data.isLoading) {
    return <div>Loading</div>;
  }

  if ($3data.error) {
    return <div>Error</div>;
  }


  if ($3data.isSuccess) {

    return (
        <${5:`!p snip.rv = snip.basename`}Container>
        </${5:`!p snip.rv = snip.basename`}Container>
    );
  }

  return <></>;
}


export default $2;
endsnippet



snippet src
import { useSetRecoilState } from 'recoil';
  const ${1} = useSetRecoilState(${2}); 
endsnippet

snippet rc
import { useRecoilValue } from 'recoil';
  const ${1} = useRecoilValue(${2}); 
endsnippet

snippet kendoGridAddbutton


//맨위로 이동

interface ButtonCommandCellProps extends GridCellProps {
  clickEvent: (item: StatisticsPeriodResponseType) => void;
}

const ButtonCommandCell = ({ clickEvent, dataItem }: EditCommandCellProps) => {
  return (
    <td>
      <button className="k-button k-primary" onClick={() => clickEvent(dataItem)}>
        modified
      </button>
    </td>
  );
};


const  ${1:eventName} = (item: StatisticsPeriodResponseType) => {
    console.log(item);
  };

const CommandCell = (props: GridCellProps) => <ButtonCommandCell {...props} clickEvent={$1} />;

endsnippet




snippet kendoTitle

import { Typography } from '@progress/kendo-react-common';

<Typography.h2>{title}</Typography.h2>
endsnippet

snippet kendomodal

import styled from 'styled-components';
import { Dialog } from '@progress/kendo-react-dialogs';
import { useSetRecoilState } from 'recoil';
import { Button } from '@progress/kendo-react-buttons';



const ${1:`!p snip.rv = snip.basename`} = () => {
  const setmodalState = useSetRecoilState(modalState);



  const closeModal = () => {
    setmodalState(false);
  };


  return (
    <Dialog title="register access Ip address" onClose={closeModal} width={400} height={300}>



    </Dialog>
  );
};

export default $;
endsnippet


snippet usetran
	const {t} = useTranslation('translation',{keyPrefix:''});
import { useTranslation } from 'react-i18next';

endsnippet

snippet useformcontext
  const {
    control,
    setError,
    clearErrors,
    getValues,
    watch,
    // setFocus,
    formState: { errors },
  } = useFormContext();

endsnippet


snippet ctl
                <Controller
                  name=""
                  control={control}
                  defaultValue=""
                  render={({ field }) => {
                    return (
                    );
                  }}
                />
endsnippet



