snippet ri
import styled from 'styled-components';

const ${1:`!p snip.rv = snip.basename`}Container = styled.div\`\`;

const ${2:`!p snip.rv = snip.basename`}= () => {
    return (
        <${1:`!p snip.rv = snip.basename`}Container>
        </${1:`!p snip.rv = snip.basename`}Container>
    );
}
export default $2;
endsnippet

snippet cl
className="${1}"
endsnippet


snippet us
  const [list, setList] = useState();
endsnippet



snippet <
<${1:tag}>`!p snip.rv = '</'+t[1]+'>'`$0
endsnippet


snippet fds
/**
@param ${1:prop} test

@description
**/
endsnippet



snippet rm
{${1:prop}.map((${2:obj}) => {

	return <div></div>
		})

		}
endsnippet






snippet reactinitobservable
import React  from 'react';
import { useObserver } from 'mobx-react-lite';


const ${1:`!p snip.rv = snip.basename`}= () => {
	return useObserver(() =>{     
	return (<div>
			</div>)
			});
}


export default $1;
endsnippet





snippet voidfn
() => void
endsnippet

snippet reactemotion
import React from "react";
import styled from "@emotion/styled";
import { css } from "@emotion/react";


export interface `!p snip.rv = snip.basename`Props{


}
endsnippet




snippet sc
	
const ${1} = styled.${2}

endsnippet 

snippet cmt
/**
	* ${1}
*/
endsnippet 


snippet stories
import React from "react";
import { Story, Meta } from "@storybook/react";


export default {
  title: "",
  component: ,
} as Meta;

const Template: Story<> = (args) => < {...args} />;

export const Primary = Template.bind({});
Primary.args = { label: "Primary ", size: "small" };

endsnippet 



snippet reactcontainer
import React  from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { RootState } from 'store';

const ${1:`!p snip.rv = snip.basename`}:React.FC<> = () => {
    const { } = useSelector((rootState: RootState) => rootState);
    const dispatch = useDispatch();
    return (
        <>
        </>
    );
}
export default $1;
endsnippet

snippet fncomp
const ${1:prop}: React.FC<${2:prop2}> = ({${3:prop3}}) => {
    return (
        <>
        </>
    );
};
endsnippet

snippet picktype
Pick<${1:prop},'${2:obj}'>
endsnippet




snippet record
Record<string,${1:prop}>

endsnippet



snippet casestic
      case '${1}':
        setInfo(
[],[]
		);
		break;
endsnippet

snippet exd
export default 
endsnippet

snippet uq
  const ${1:hook}data = use$1()


  if ($1data.error) {
    return <div>Error</div>;
  }



  return <>
import OverlayLodaing from 'components/common/OverlayLodaing';
        {$1data.isLoading && <OverlayLodaing />}
  </>;

endsnippet


snippet um
  const ${1:hook}data = use$1()


  const onSubmit = (data: any) => {
    $1data.mutate({});
  };

  if ($1data.isLoading) {
    return <div>Loading</div>;
  }

  if ($1data.error) {
    return <div>Error</div>;
  }



  if ($1data.isSuccess) {
    return <div>성공</div>;
  }


  return <></>;

endsnippet



snippet rqi
import styled from 'styled-components';

const ${4:`!p snip.rv = snip.basename`}Container = styled.div\`\`;

const ${2:`!p snip.rv = snip.basename`}= () => {

  const ${3:`!p snip.rv = snip.basename`}data = use${1:hookName}


  if ($3data.error) {
    return <div>Error</div>;
  }

    return (
        <${5:`!p snip.rv = snip.basename`}Container>
        {$3data.isLoading && <OverlayLodaing />}
        </${5:`!p snip.rv = snip.basename`}Container>
    );

}


export default $2;
endsnippet



snippet src
import { useSetRecoilState } from 'recoil';
  const ${1} = useSetRecoilState(${2}); 
endsnippet

# snippet rc
# import { useRecoilValue } from 'recoil';
#   const ${1} = useRecoilValue(${2}); 
# endsnippet

snippet kendoGridAddbutton


//맨위로 이동

interface ButtonCommandCellProps extends GridCellProps {
  clickEvent: (item: StatisticsPeriodResponseType) => void;
}

const ButtonCommandCell = ({ clickEvent, dataItem }: EditCommandCellProps) => {
  return (
    <td>
      <button className="k-button k-primary" onClick={() => clickEvent(dataItem)}>
        modified
      </button>
    </td>
  );
};


const  ${1:eventName} = (item: StatisticsPeriodResponseType) => {
    console.log(item);
  };

const CommandCell = (props: GridCellProps) => <ButtonCommandCell {...props} clickEvent={$1} />;

endsnippet


snippet kendogridinit

import styled from 'styled-components';
import { useTranslation } from 'react-i18next';
import { Grid, GridColumn as Column } from '@progress/kendo-react-grid';

const ${1:`!p snip.rv = snip.basename`}Container = styled.div\`\`;
const ${2:`!p snip.rv = snip.basename`}= () => {
  const { t } = useTranslation('translation', { keyPrefix: 'system' });



    return (
        <${1:`!p snip.rv = snip.basename`}Container>
      <Grid
        style={{
          overflow: 'auto',
        }}
        data={[]}
      >
        <Column field={'componentId'} title={t('ifctotal')} />
        <Column field={'componentName'} title={t('connected')} />
        <Column field={'componentId'} title={t('agwtotal')} />
        <Column field={'componentName'} title={t('connected')} />
      </Grid>
        </${1:`!p snip.rv = snip.basename`}Container>
    );
}
export default $2;
endsnippet


snippet kendogrid

import { Grid, GridColumn as Column } from '@progress/kendo-react-grid';
      <Grid
        style={{
          overflow: 'auto',
        }}
        data={[]}
      >
        <Column field={''} title={t('')} />
        <Column field={''} title={t('')} />
        <Column field={''} title={t('')} />
        <Column field={''} title={t('')} />
      </Grid>
}
export default $2;
endsnippet




snippet kendoTitle

import { Typography } from '@progress/kendo-react-common';

<Typography.h2>{title}</Typography.h2>
endsnippet

snippet kendomodal

import styled from 'styled-components';
import { Dialog } from '@progress/kendo-react-dialogs';
import { useSetRecoilState } from 'recoil';
import { Button } from '@progress/kendo-react-buttons';



const ${1:`!p snip.rv = snip.basename`} = () => {
  const setmodalState = useSetRecoilState(modalState);



  const closeModal = () => {
    setmodalState(false);
  };


  return (
    <Dialog title="register access Ip address" onClose={closeModal} width={400} height={300}>



    </Dialog>
  );
};

export default $;
endsnippet


snippet kendoform

import styled from 'styled-components';
import { Typography } from '@progress/kendo-react-common';
import { Label } from '@progress/kendo-react-labels';
import { NumericTextBox } from '@progress/kendo-react-inputs';
import { CancelButton, ModifyButton, SaveButton } from 'components/common/button/ButtonGroup';


const ${1:`!p snip.rv = snip.basename`}Container = styled.div\`;
  display: flex;
  flex-direction: column;
  gap: 1rem;
  width: 40rem;
\`;


const InputContainer = styled.div\`
  display: flex;
  label {
    justify-content: flex-end;
    align-items: center;
    font-weight: bold;
    width: 15rem;
  }

\`;
const ButtonContainer = styled.div\`
	margin-left:auto;
\`;


const ${2:`!p snip.rv = snip.basename`}= () => {
    return (
        <${1:`!p snip.rv = snip.basename`}Container>
      <Typography.h2>루트 그룹 정보</Typography.h2>
<InputContainer>
              <Label editorId="cho"></Label>
              <NumericTextBox id="cho" />
              <ModifyButton onClick={handleModifyButton} />

</InputContainer>

          <ButtonContainer>
            <SaveButton />
            <CancelButton />
          </ButtonContainer>
        </${1:`!p snip.rv = snip.basename`}Container>
    );
}



endsnippet


snippet kendobutton

import { Typography } from '@progress/kendo-react-common';
import { CancelButton, ModifyButton, SaveButton } from 'components/common/button/ButtonGroup';
const ButtonContainer = styled.div``;
          <ButtonContainer>
            <SaveButton />
            <CancelButton />
          </ButtonContainer>

endsnippet



snippet usetran
	const {t} = useTranslation('translation',{keyPrefix:''});
import { useTranslation } from 'react-i18next';

endsnippet

snippet useformcontext
  const {
    control,
    setError,
    clearErrors,
    getValues,
    watch,
    // setFocus,
    formState: { errors },
  } = useFormContext();

endsnippet


snippet ctl
                <Controller
                  name=""
                  control={control}
                  defaultValue=""
                  render={({ field }) => {
                    return (
                    );
                  }}
                />
endsnippet


snippet uf

import { object, string, number, ref } from 'yup';
import { yupResolver } from '@hookform/resolvers/yup';
import FormTextError from 'components/common/error/FormTextError';

const schema = object().shape({
  domain: string().required('필수 값 입니다'),
  smsGrpId: string().required('필수 값 입니다'),
});


  const {
    control,
    handleSubmit,
    setValue,
    setError,
    watch,
    reset,
    formState: { errors },
  } = useForm({
    resolver: yupResolver(schema),
  });

          <FormTextError error={get(errors, 'roldId')} />

endsnippet




snippet un

import { useNormalAlert } from 'hooks/custom/useViewAlert';
  const customAlert = useNormalAlert();
      customAlert();


endsnippet


snippet uc

import { useConfirmAlert } from 'hooks/custom/useViewAlert';
  const customConfirm = useConfirmAlert();
          if (await customConfirm()) {

          }

endsnippet



snippet qc

	const qc = useQueryClient()
import { useQueryClient } from 'react-query';

endsnippet


snippet st

import React from "react";
import { Story, Meta } from "@storybook/react";

const ${2:`!p snip.rv = snip.basename.replace('.stroies','')`}Template: Story<any> = (args) => {
  return (
    <div>
      <div>
      </div>
    </div>
  );
};

export const $2Button = $2Template.bind({});

export default {
  title: "Components/Button",
  component: $2Button,
  argTypes: {
    on: {
      options: [true, false],
      control: { type: "radio" },
    },

  },
} as Meta;

endsnippet


