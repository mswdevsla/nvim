snippet ii "magic import" b
import `!p
def formatVariableName(path):
  parts = path.split('/')
  module = parts[0]
  if len(parts) > 1:
    return parts[-1]
  else:
    return re.sub(r'[_\-]', '', module.title())
snip.rv = formatVariableName(t[1])
` from '${1}';$0
endsnippet`')`



snippet "<([^\s].*)" "tag <...></...>" r
`!p snip.rv='<'+match.group(1)+'>'+'</'+match.group(1)+'>'`$0
endsnippet


snippet fori
for (var ${1:prop} in ${2:object}) {
	 ${0:$2[$1]}
}
endsnippet


snippet reducer 
import { createSlice } from "@reduxjs/toolkit";

export const $1Slice = createSlice({
  name: "movie",
  initialState: {
    count: 0,
  },
  reducers: {
    increment: (state, action) => {
      state.count = state.count + 1;
    },
    decrement: (state, action) => {
      state.count = state.count - 1;
    },
  },
});

export const { increment, decrement } = $1Slice.actions;

export default $1Slice.reducer;


endsnippet



snippet test

it('', () => {
  expect().toBe();
});

endsnippet

snippet us
  const [text, setText] = useState('');

endsnippet



snippet uf
  useEffect(() => {
    console.log('')
  }, []);

endsnippet

snippet exd
  export default
endsnippet


snippet vw
  <View>

  </View>

endsnippet


snippet te
  <Text>

  </Text>

endsnippet



snippet rni

import React  from 'react';
import { View } from 'react-native';
const ${2:`!p snip.rv = snip.basename`}= () => {
    return (
        <View>
		{""}
        </View>
    );
}


export default $2;

endsnippet



snippet flist


      <FlatList
        showsVerticalScrollIndicator={false}
        data={[]}
        numColumns={1}
        renderItem={({item, index}) => (
          <View>
{""}

		  </View>
        )}
        keyExtractor={(item, index) => index.toString()}
      />


endsnippet


snippet pa
/**
 * @param  ios {number} - ios 픽셀사이즈
 */

endsnippet

snippet fl
    {
		flexDirection: 'row',
		justifyContent: 'center',
		alignItems: 'center',
    }
endsnippet


snippet mt
marginTop:
endsnippet



snippet mb
marginBottom:
endsnippet


snippet qh
import { useQuery } from 'react-query';
import apiInstance from "lib/api/api";
import userKeys from "lib/querykeys/user";
import { userapi } from "lib/api/user";
import { apiRequest } from "lib/api/api";

const get${1:`!p snip.rv = snip.basename`} = async (params) => {
	const { data } = await apiRequest.get('',params);

  return data;
};

export default function ${2:`!p snip.rv = snip.basename`}() {
  return useQuery('', get$1);
}

endsnippet



snippet mh
import { useMutation, useQueryClient } from 'react-query';
import { apiRequest } from "lib/api/api";

const ${1:`!p snip.rv = snip.basename`} = async (reqData) => {
  const { data } = await apiRequest.post('',reqData);
;
  return data;
};

export default function ${2:`!p snip.rv = snip.basename`}() {

  return useMutation($1, {
    onSuccess: async (data) => {
    },
    onError: (error) => {
    },
    onMutate: (varialb) => {
      // 로딩중
      // console.log(varialb, 'onMutate');
    },
  });
}

endsnippet


snippet querykeys

const MAINKEY = ["${1:`!p snip.rv = snip.basename`}"];

const $1Keys = {
  userList: [...MAINKEY, "$1List"],
};

export default $1Keys;

endsnippet

