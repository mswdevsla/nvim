snippet reduxstore
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { ActionsObservable, combineEpics, StateObservable } from 'redux-observable';
import { filter, map, switchMap, tap } from 'rxjs/operators';
import { RootState } from 'store';


export interface ${1:`!p snip.rv = snip.basename`}State {
}


const initialState: $1State = {
};

const $1Slice = createSlice({
    name: '$1',
    initialState,
    reducers: {
    },
});

export const $1SliceAction = $1Slice.actions;


//const Epic = (
//    action$: ActionsObservable<typeof $1Action.>,
//    state$: StateObservable<RootState>,
//) =>
//    action$.pipe(
//    	 filter($1Action.clickStatCategoryDetail$.match),
//        switchMap((action) => {
//            return get$<StaticsType[]>('/statistics');
//        }),
//        map(staticSlickAction.setStatCategoryDevice),
//    );


export const $1Epic = combineEpics();

export default $1Slice.reducer;
endsnippet





snippet createEpic
const ${1:prop}Epic = (
    action$: ActionsObservable<typeof >,
    state$: StateObservable<RootState>,
) =>
    action$.pipe(
    	 filter(),
        switchMap((action) => {
            //return get$<StaticsType[]>('/statistics');
        }),
        map(),
    );
endsnippet

snippet createReducer
        ${1:prop}(state, action: PayloadAction<>) {
        },
endsnippet



snippet ramdajs
import $1 from 'ramda/src/${1:prop}';
endsnippet



snippet picktype
Pick<${1:prop},'${2:obj}'>
endsnippet

snippet impt
import ${1:obj} from '${2:obj2}'
endsnippet


snippet atm
atom<${1:obj}>({
key: '${2:obj2}',
default: 
})
endsnippet



snippet exd
export default 
endsnippet


snippet hq
import { axiosInstance } from 'lib/api';
import { useQuery } from 'react-query';

const get${2:`!p snip.rv = snip.basename`} = async () => {
  const { data } = await axiosInstance.get('').catch((error) => {
      throw error.response.data;
	    });

  return data;
};

export default function ${2:`!p snip.rv = snip.basename`}() {
  return useQuery('', get${2:`!p snip.rv = snip.basename`});
}

endsnippet


snippet hm
import { axiosInstance } from 'lib/api';
import { useMutation } from 'react-query';

const ${1:`!p snip.rv = snip.basename`} = async (reqData) => {
  const { data } = await axiosInstance.post('',reqData).catch((error) => {
    throw error.response;
  });
;
  return data;
};

export default function ${2:`!p snip.rv = snip.basename`}() {
  const qc = useQueryClient();

  return useMutation($1, {
    onSuccess: (data) => {
qc.invalidateQueries()
      console.log('success', data);
    },
    onError: (error) => {
      //인증 에러 처리
      console.log('error');
      // return '';
    },
    onMutate: (varialb) => {
      // 로딩중
      console.log(varialb, 'onMutate');
    },
  });
}

endsnippet
